/*
MIT License

Copyright (c) 2019-2020 Emil Barczy≈Ñski

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/
#pragma once
#include <cstdint>
#include <cmath>

#include <algorithm>
#include <charconv>
#include <string>
#include <type_traits>


namespace fast {

	enum struct flags : int {
		EMPTY = 0x0,
		SILENT = 0x1,
		UNSAFE = 0x2,
		SATURATE = 0x4,
	};

} // namespace fast

constexpr ::fast::flags operator|(const ::fast::flags& lhs, const ::fast::flags& rhs) {
	return static_cast<::fast::flags>(static_cast<int>(lhs) | static_cast<int>(rhs));
}

constexpr bool operator&(const ::fast::flags& lhs, const ::fast::flags& rhs) {
	return static_cast<int>(lhs) & static_cast<int>(rhs);
}


namespace fast {

	template <typename T, int base, int exponent>
	struct ipow
	{
		static_assert(base >= 1);
		static_assert(exponent >= 0);
		static constexpr T value{ T{ base } * ::fast::ipow<T, base, exponent - 1>::value };
	};

	template <typename T, int exponent>
	struct ipow<T, 1, exponent>
	{
		static constexpr T value{ 1 };
	};

	template <typename T, int base>
	struct ipow<T, base, 0>
	{
		static constexpr T value{ 1 };
	};

} // namespace fast


namespace fast {
	namespace std {

		static constexpr int S_min = 1;
		static constexpr int S_max = 12;

		template <int S = S_max / 2, ::fast::flags F = ::fast::flags::EMPTY, typename T>
		inline ::std::string to_string(T value)
		{
			using namespace ::std::literals;
			static_assert(S_min <= S and S <= S_max); // fractional digits [1, 12]

			using num_t = ::std::remove_cv_t<::std::remove_reference_t<T>>;
			static_assert(::std::is_same_v<num_t, double>);

			union { // conversion union
				num_t  i;
				int64_t i_raw64[1];
				int32_t i_raw32[2];
				int16_t i_raw16[4];
			};
			static_assert(sizeof(i) <= sizeof(i_raw64));
			static_assert(sizeof(i) <= sizeof(i_raw32));
			static_assert(sizeof(i) <= sizeof(i_raw16));

			::std::string s;
			if constexpr (F & ::fast::flags::UNSAFE) {
				// s;
			} else {
				s = "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"s; // NRVO + SSO
			}

			// initialize conversion
			i = value;

			// scale the value
			num_t f;
			if (::std::abs(value) < 1) {
				// "add" 1 to handle leading '0's
				f = (value + (1 | (i_raw64[0] >> 63))) * ::fast::ipow<num_t, 10, S>::value;
			} else {
				f = value * ::fast::ipow<num_t, 10, S>::value;
			}

			// saturation, if permitted
			if (::std::abs(f) > ::fast::ipow<num_t, 10, 15>::value) {
				if constexpr (F & ::fast::flags::SATURATE) {
					f = ::fast::ipow<num_t, 10, 15>::value * (1 | (i_raw64[0] >> 63));
				} else {
					return "err"s;
				}
			}

			// double to integer conversion
			i = f + 6755399441055744.0;

			// integer to string conversion
			::std::to_chars_result i_res;
			if (::std::abs(f) >= ::fast::ipow<num_t, 2, 31>::value - 1) {
				i_raw64[0] <<= 1 + 11 + 1; i_raw64[0] >>= 1 + 11 + 1; // sign replication
				i_res = ::std::to_chars(s.data(), s.data() + s.capacity() - 1, i_raw64[0]); // conversion
				if (i_res.ec == ::std::errc::value_too_large) { // fallback conversion
					s = "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"s; // "+/-15.15f"
					i_res = ::std::to_chars(s.data(), s.data() + s.capacity() - 1, i_raw64[0]);
				}
			} else if (::std::abs(f) >= ::fast::ipow<num_t, 2, 15>::value - 1) {
				i_res = ::std::to_chars(s.data(), s.data() + s.capacity() - 1, i_raw32[0]);
			} else {
				i_res = ::std::to_chars(s.data(), s.data() + s.capacity() - 1, i_raw16[0]);
			}

			if (i_res.ec == ::std::errc::value_too_large) {
				if constexpr (F & ::fast::flags::SILENT) {
					return ""s;
				} else {
					return "err"s;
				}
			}

			// move fractional part
			for (int ind = 0; ind < S; ++ind) {
				i_res.ptr[-ind] = i_res.ptr[-ind - 1];
			}

			// insert fractional separator
			i_res.ptr[-S] = '.';

			// "subtract" previously added 1
			if (::std::abs(value) < 1) {
				i_res.ptr[-S - 1] -= 1;
			}

			// string length fixing
			if constexpr (F & ::fast::flags::UNSAFE) {
				i_res.ptr[1] = '\0';
				reinterpret_cast<uint8_t*>(&s)[sizeof(void*)] = i_res.ptr + 1 - s.data();
			} else {
				s.resize(i_res.ptr + 1 - s.data());
			}

			return s; // voila
		} // to_string

	} // namespace std;
} // namespace fast;
